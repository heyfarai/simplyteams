// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                             String             @id @default(cuid())
  name                           String             @default("")
  email                          String             @unique @default("")
  password                       String
  dateOfBirth                    String?
  role                           String             @default("CUSTOMER")
  dependents                     Dependent[]        @relation("Dependent_customer")
  posts                          Post[]             @relation("Post_author")
  enrollments                    Enrollment[]       @relation("Enrollment_customer")
  participantEnrollments         Enrollment[]       @relation("Enrollment_participant")
  createdAt                      DateTime?          @default(now())
  updatedAt                      DateTime?          @default(now())
  waiverAcceptances              WaiverAcceptance[] @relation("WaiverAcceptance_customer")
  instructedPrograms             Program[]          @relation("Program_instructors")
  tShirtFit                      String?
  tShirtSize                     String?
  from_FacilityRental_customer   FacilityRental[]   @relation("FacilityRental_customer")
  from_Payment_customer          Payment[]          @relation("Payment_customer")
  from_Invoice_customer          Invoice[]          @relation("Invoice_customer")
  from_Refund_customer           Refund[]           @relation("Refund_customer")
  from_PurchasedPackage_customer PurchasedPackage[] @relation("PurchasedPackage_customer")
  from_TrainingSession_coach     TrainingSession[]  @relation("TrainingSession_coach")
  from_TrainingSession_customer  TrainingSession[]  @relation("TrainingSession_customer")
}

model Dependent {
  id                              String             @id @default(cuid())
  name                            String             @default("")
  dateOfBirth                     String?
  customer                        User?              @relation("Dependent_customer", fields: [customerId], references: [id])
  customerId                      String?            @map("customer")
  participantEnrollments          Enrollment[]       @relation("Enrollment_dependent")
  createdAt                       DateTime?          @default(now())
  updatedAt                       DateTime?          @default(now())
  waiverAcceptances               WaiverAcceptance[] @relation("WaiverAcceptance_dependent")
  tShirtFit                       String?
  tShirtSize                      String?
  from_PurchasedPackage_dependent PurchasedPackage[] @relation("PurchasedPackage_dependent")
  from_TrainingSession_dependent  TrainingSession[]  @relation("TrainingSession_dependent")

  @@index([customerId])
}

model Post {
  id        String    @id @default(cuid())
  title     String    @default("")
  content   String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author    User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId  String?   @map("author")
  tags      Tag[]     @relation("Post_tags")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  @@index([authorId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags")
}

model Facility {
  id                            String            @id @default(cuid())
  name                          String            @default("")
  sport                         String
  facilityType                  String
  overlapsWith                  Facility[]        @relation("Facility_overlapsWith")
  programs                      Program[]         @relation("Program_facility")
  createdAt                     DateTime?         @default(now())
  updatedAt                     DateTime?         @default(now())
  bookable                      Boolean           @default(true)
  allowClashes                  Boolean           @default(false)
  minBookingDurationMinutes     Int?              @default(30)
  maxBookingDurationMinutes     Int?              @default(60)
  openTime                      String            @default("")
  closeTime                     String            @default("")
  from_Facility_overlapsWith    Facility[]        @relation("Facility_overlapsWith")
  from_Session_facility         Session[]         @relation("Session_facility")
  from_FacilityRental_facility  FacilityRental[]  @relation("FacilityRental_facility")
  from_TrainingSession_facility TrainingSession[] @relation("TrainingSession_facility")
}

model Program {
  id                          String       @id @default(cuid())
  name                        String       @default("")
  description                 String       @default("")
  type                        String
  startDate                   DateTime
  endDate                     DateTime
  capacity                    Int
  price                       Float
  memberPrice                 Float?
  isActive                    Boolean      @default(true)
  isVisible                   Boolean      @default(true)
  customSessions              Boolean      @default(false)
  repeats                     Boolean      @default(true)
  frequency                   String?      @default("daily")
  recurrenceEnds              String?      @default("never")
  recurrenceEndDate           String?
  recurrenceCount             Int?
  facility                    Facility?    @relation("Program_facility", fields: [facilityId], references: [id])
  facilityId                  String?      @map("facility")
  schedule                    String?
  startTime                   DateTime
  endTime                     DateTime
  daysOfWeek                  String       @default("[]")
  enrollments                 Enrollment[] @relation("Enrollment_program")
  minAge                      Int?
  maxAge                      Int?
  createdAt                   DateTime?    @default(now())
  updatedAt                   DateTime?    @default(now())
  status                      String       @default("upcoming")
  enrollmentStartDate         DateTime?
  enrollmentEndDate           DateTime?
  instructors                 User[]       @relation("Program_instructors")
  sessions                    Session[]    @relation("Session_program")
  requireEmergencyContactInfo Boolean      @default(false)
  requireTShirtSize           Boolean      @default(false)
  allowDropIn                 Boolean      @default(false)
  dropInPrice                 Float?

  @@index([facilityId])
}

model Enrollment {
  id            String     @id @default(cuid())
  program       Program?   @relation("Enrollment_program", fields: [programId], references: [id])
  programId     String?    @map("program")
  session       Session?   @relation("Enrollment_session", fields: [sessionId], references: [id])
  sessionId     String?    @map("session")
  customer      User?      @relation("Enrollment_customer", fields: [customerId], references: [id])
  customerId    String?    @map("customer")
  participant   User?      @relation("Enrollment_participant", fields: [participantId], references: [id])
  participantId String?    @map("participant")
  dependent     Dependent? @relation("Enrollment_dependent", fields: [dependentId], references: [id])
  dependentId   String?    @map("dependent")
  status        String     @default("pending")
  enrolledAt    DateTime?  @default(now())
  updatedAt     DateTime?  @default(now())

  @@index([programId])
  @@index([sessionId])
  @@index([customerId])
  @@index([participantId])
  @@index([dependentId])
}

model Waiver {
  id          String             @id @default(cuid())
  title       String             @default("")
  text        String             @default("")
  version     String             @default("")
  createdAt   DateTime?          @default(now())
  acceptances WaiverAcceptance[] @relation("WaiverAcceptance_waiver")
}

model WaiverAcceptance {
  id          String     @id @default(cuid())
  waiver      Waiver?    @relation("WaiverAcceptance_waiver", fields: [waiverId], references: [id])
  waiverId    String?    @map("waiver")
  customer    User?      @relation("WaiverAcceptance_customer", fields: [customerId], references: [id])
  customerId  String?    @map("customer")
  dependent   Dependent? @relation("WaiverAcceptance_dependent", fields: [dependentId], references: [id])
  dependentId String?    @map("dependent")
  acceptedAt  DateTime?  @default(now())

  @@index([waiverId])
  @@index([customerId])
  @@index([dependentId])
}

model Session {
  id                      String       @id @default(cuid())
  program                 Program?     @relation("Session_program", fields: [programId], references: [id])
  programId               String?      @map("program")
  date                    String
  startTime               DateTime
  endTime                 DateTime
  facility                Facility?    @relation("Session_facility", fields: [facilityId], references: [id])
  facilityId              String?      @map("facility")
  dropInPrice             Float?
  createdAt               DateTime?    @default(now())
  updatedAt               DateTime?    @default(now())
  from_Enrollment_session Enrollment[] @relation("Enrollment_session")

  @@index([programId])
  @@index([facilityId])
}

model FacilityRental {
  id            String    @id @default(cuid())
  facility      Facility? @relation("FacilityRental_facility", fields: [facilityId], references: [id])
  facilityId    String?   @map("facility")
  customer      User?     @relation("FacilityRental_customer", fields: [customerId], references: [id])
  customerId    String?   @map("customer")
  startTime     DateTime
  endTime       DateTime
  status        String?   @default("pending")
  holdExpiresAt DateTime?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @default(now())

  @@index([facilityId])
  @@index([customerId])
}

model Payment {
  id                            String             @id @default(cuid())
  amount                        Float
  status                        String             @default("pending")
  stripePaymentIntentId         String             @default("")
  customer                      User?              @relation("Payment_customer", fields: [customerId], references: [id])
  customerId                    String?            @map("customer")
  invoice                       Invoice?           @relation("Invoice_payment")
  createdAt                     DateTime?          @default(now())
  updatedAt                     DateTime?          @default(now())
  from_PurchasedPackage_payment PurchasedPackage[] @relation("PurchasedPackage_payment")

  @@index([customerId])
}

model Invoice {
  id                            String             @id @default(cuid())
  amount                        Float
  status                        String             @default("draft")
  payment                       Payment?           @relation("Invoice_payment", fields: [paymentId], references: [id])
  paymentId                     String?            @unique @map("payment")
  customer                      User?              @relation("Invoice_customer", fields: [customerId], references: [id])
  customerId                    String?            @map("customer")
  createdAt                     DateTime?          @default(now())
  updatedAt                     DateTime?          @default(now())
  from_PurchasedPackage_invoice PurchasedPackage[] @relation("PurchasedPackage_invoice")

  @@index([customerId])
}

model Refund {
  id             String    @id @default(cuid())
  amount         Float
  status         String    @default("pending")
  stripeChargeId String    @default("")
  customer       User?     @relation("Refund_customer", fields: [customerId], references: [id])
  customerId     String?   @map("customer")
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now())

  @@index([customerId])
}

model TrainingPackage {
  id                String             @id @default(cuid())
  name              String             @default("")
  description       String             @default("")
  sessionCount      Int
  price             Float
  isActive          Boolean            @default(true)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @default(now())
  purchasedPackages PurchasedPackage[] @relation("PurchasedPackage_package")
}

model PurchasedPackage {
  id                String            @id @default(cuid())
  package           TrainingPackage?  @relation("PurchasedPackage_package", fields: [packageId], references: [id])
  packageId         String?           @map("package")
  customer          User?             @relation("PurchasedPackage_customer", fields: [customerId], references: [id])
  customerId        String?           @map("customer")
  dependent         Dependent?        @relation("PurchasedPackage_dependent", fields: [dependentId], references: [id])
  dependentId       String?           @map("dependent")
  sessionsRemaining Int
  sessionsUsed      Int?              @default(0)
  purchasedAt       DateTime?         @default(now())
  trainingSessions  TrainingSession[] @relation("TrainingSession_purchasedPackage")
  payment           Payment?          @relation("PurchasedPackage_payment", fields: [paymentId], references: [id])
  paymentId         String?           @map("payment")
  invoice           Invoice?          @relation("PurchasedPackage_invoice", fields: [invoiceId], references: [id])
  invoiceId         String?           @map("invoice")

  @@index([packageId])
  @@index([customerId])
  @@index([dependentId])
  @@index([paymentId])
  @@index([invoiceId])
}

model TrainingSession {
  id                 String            @id @default(cuid())
  purchasedPackage   PurchasedPackage? @relation("TrainingSession_purchasedPackage", fields: [purchasedPackageId], references: [id])
  purchasedPackageId String?           @map("purchasedPackage")
  coach              User?             @relation("TrainingSession_coach", fields: [coachId], references: [id])
  coachId            String?           @map("coach")
  customer           User?             @relation("TrainingSession_customer", fields: [customerId], references: [id])
  customerId         String?           @map("customer")
  dependent          Dependent?        @relation("TrainingSession_dependent", fields: [dependentId], references: [id])
  dependentId        String?           @map("dependent")
  facility           Facility?         @relation("TrainingSession_facility", fields: [facilityId], references: [id])
  facilityId         String?           @map("facility")
  scheduledAt        DateTime
  startTime          DateTime
  endTime            DateTime
  status             String?           @default("scheduled")
  notes              String            @default("")
  createdAt          DateTime?         @default(now())
  updatedAt          DateTime?         @default(now())

  @@index([purchasedPackageId])
  @@index([coachId])
  @@index([customerId])
  @@index([dependentId])
  @@index([facilityId])
}
