# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  dateOfBirth: CalendarDay
  role: String
  dependents(where: DependentWhereInput! = {}, orderBy: [DependentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DependentWhereUniqueInput): [Dependent!]
  dependentsCount(where: DependentWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  enrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  participantEnrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  participantEnrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  waiverAcceptances(where: WaiverAcceptanceWhereInput! = {}, orderBy: [WaiverAcceptanceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WaiverAcceptanceWhereUniqueInput): [WaiverAcceptance!]
  waiverAcceptancesCount(where: WaiverAcceptanceWhereInput! = {}): Int
  instructedPrograms(where: ProgramWhereInput! = {}, orderBy: [ProgramOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProgramWhereUniqueInput): [Program!]
  instructedProgramsCount(where: ProgramWhereInput! = {}): Int
  tShirtFit: String
  tShirtSize: String
  tShirtDescription: String
}

type PasswordState {
  isSet: Boolean!
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  dateOfBirth: CalendarDayNullableFilter
  role: StringFilter
  dependents: DependentManyRelationFilter
  posts: PostManyRelationFilter
  enrollments: EnrollmentManyRelationFilter
  participantEnrollments: EnrollmentManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  waiverAcceptances: WaiverAcceptanceManyRelationFilter
  instructedPrograms: ProgramManyRelationFilter
  tShirtFit: StringNullableFilter
  tShirtSize: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input DependentManyRelationFilter {
  every: DependentWhereInput
  some: DependentWhereInput
  none: DependentWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input EnrollmentManyRelationFilter {
  every: EnrollmentWhereInput
  some: EnrollmentWhereInput
  none: EnrollmentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input WaiverAcceptanceManyRelationFilter {
  every: WaiverAcceptanceWhereInput
  some: WaiverAcceptanceWhereInput
  none: WaiverAcceptanceWhereInput
}

input ProgramManyRelationFilter {
  every: ProgramWhereInput
  some: ProgramWhereInput
  none: ProgramWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  dateOfBirth: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  tShirtFit: OrderDirection
  tShirtSize: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  dateOfBirth: CalendarDay
  role: String
  dependents: DependentRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  enrollments: EnrollmentRelateToManyForUpdateInput
  participantEnrollments: EnrollmentRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  waiverAcceptances: WaiverAcceptanceRelateToManyForUpdateInput
  instructedPrograms: ProgramRelateToManyForUpdateInput
  tShirtFit: String
  tShirtSize: String
}

input DependentRelateToManyForUpdateInput {
  disconnect: [DependentWhereUniqueInput!]
  set: [DependentWhereUniqueInput!]
  create: [DependentCreateInput!]
  connect: [DependentWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input EnrollmentRelateToManyForUpdateInput {
  disconnect: [EnrollmentWhereUniqueInput!]
  set: [EnrollmentWhereUniqueInput!]
  create: [EnrollmentCreateInput!]
  connect: [EnrollmentWhereUniqueInput!]
}

input WaiverAcceptanceRelateToManyForUpdateInput {
  disconnect: [WaiverAcceptanceWhereUniqueInput!]
  set: [WaiverAcceptanceWhereUniqueInput!]
  create: [WaiverAcceptanceCreateInput!]
  connect: [WaiverAcceptanceWhereUniqueInput!]
}

input ProgramRelateToManyForUpdateInput {
  disconnect: [ProgramWhereUniqueInput!]
  set: [ProgramWhereUniqueInput!]
  create: [ProgramCreateInput!]
  connect: [ProgramWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  dateOfBirth: CalendarDay
  role: String
  dependents: DependentRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  enrollments: EnrollmentRelateToManyForCreateInput
  participantEnrollments: EnrollmentRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  waiverAcceptances: WaiverAcceptanceRelateToManyForCreateInput
  instructedPrograms: ProgramRelateToManyForCreateInput
  tShirtFit: String
  tShirtSize: String
}

input DependentRelateToManyForCreateInput {
  create: [DependentCreateInput!]
  connect: [DependentWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input EnrollmentRelateToManyForCreateInput {
  create: [EnrollmentCreateInput!]
  connect: [EnrollmentWhereUniqueInput!]
}

input WaiverAcceptanceRelateToManyForCreateInput {
  create: [WaiverAcceptanceCreateInput!]
  connect: [WaiverAcceptanceWhereUniqueInput!]
}

input ProgramRelateToManyForCreateInput {
  create: [ProgramCreateInput!]
  connect: [ProgramWhereUniqueInput!]
}

type Dependent {
  id: ID!
  name: String
  dateOfBirth: CalendarDay
  customer: User
  participantEnrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  participantEnrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  waiverAcceptances(where: WaiverAcceptanceWhereInput! = {}, orderBy: [WaiverAcceptanceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WaiverAcceptanceWhereUniqueInput): [WaiverAcceptance!]
  waiverAcceptancesCount(where: WaiverAcceptanceWhereInput! = {}): Int
  tShirtFit: String
  tShirtSize: String
  tShirtDescription: String
}

input DependentWhereUniqueInput {
  id: ID
}

input DependentWhereInput {
  AND: [DependentWhereInput!]
  OR: [DependentWhereInput!]
  NOT: [DependentWhereInput!]
  id: IDFilter
  name: StringFilter
  dateOfBirth: CalendarDayNullableFilter
  customer: UserWhereInput
  participantEnrollments: EnrollmentManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  waiverAcceptances: WaiverAcceptanceManyRelationFilter
  tShirtFit: StringNullableFilter
  tShirtSize: StringNullableFilter
}

input DependentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  dateOfBirth: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  tShirtFit: OrderDirection
  tShirtSize: OrderDirection
}

input DependentUpdateInput {
  name: String
  dateOfBirth: CalendarDay
  customer: UserRelateToOneForUpdateInput
  participantEnrollments: EnrollmentRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  waiverAcceptances: WaiverAcceptanceRelateToManyForUpdateInput
  tShirtFit: String
  tShirtSize: String
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input DependentUpdateArgs {
  where: DependentWhereUniqueInput!
  data: DependentUpdateInput!
}

input DependentCreateInput {
  name: String
  dateOfBirth: CalendarDay
  customer: UserRelateToOneForCreateInput
  participantEnrollments: EnrollmentRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  waiverAcceptances: WaiverAcceptanceRelateToManyForCreateInput
  tShirtFit: String
  tShirtSize: String
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Facility {
  id: ID!
  name: String
  sport: String
  facilityType: String
  overlapsWith(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  overlapsWithCount(where: FacilityWhereInput! = {}): Int
  programs(where: ProgramWhereInput! = {}, orderBy: [ProgramOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProgramWhereUniqueInput): [Program!]
  programsCount(where: ProgramWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  bookable: Boolean
  allowClashes: Boolean
  minBookingDurationMinutes: Int
  maxBookingDurationMinutes: Int
  openTime: String
  closeTime: String
}

input FacilityWhereUniqueInput {
  id: ID
}

input FacilityWhereInput {
  AND: [FacilityWhereInput!]
  OR: [FacilityWhereInput!]
  NOT: [FacilityWhereInput!]
  id: IDFilter
  name: StringFilter
  sport: StringFilter
  facilityType: StringFilter
  overlapsWith: FacilityManyRelationFilter
  programs: ProgramManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  bookable: BooleanFilter
  allowClashes: BooleanFilter
  minBookingDurationMinutes: IntNullableFilter
  maxBookingDurationMinutes: IntNullableFilter
  openTime: StringFilter
  closeTime: StringFilter
}

input FacilityManyRelationFilter {
  every: FacilityWhereInput
  some: FacilityWhereInput
  none: FacilityWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FacilityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  sport: OrderDirection
  facilityType: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  bookable: OrderDirection
  allowClashes: OrderDirection
  minBookingDurationMinutes: OrderDirection
  maxBookingDurationMinutes: OrderDirection
  openTime: OrderDirection
  closeTime: OrderDirection
}

input FacilityUpdateInput {
  name: String
  sport: String
  facilityType: String
  overlapsWith: FacilityRelateToManyForUpdateInput
  programs: ProgramRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  bookable: Boolean
  allowClashes: Boolean
  minBookingDurationMinutes: Int
  maxBookingDurationMinutes: Int
  openTime: String
  closeTime: String
}

input FacilityRelateToManyForUpdateInput {
  disconnect: [FacilityWhereUniqueInput!]
  set: [FacilityWhereUniqueInput!]
  create: [FacilityCreateInput!]
  connect: [FacilityWhereUniqueInput!]
}

input FacilityUpdateArgs {
  where: FacilityWhereUniqueInput!
  data: FacilityUpdateInput!
}

input FacilityCreateInput {
  name: String
  sport: String
  facilityType: String
  overlapsWith: FacilityRelateToManyForCreateInput
  programs: ProgramRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  bookable: Boolean
  allowClashes: Boolean
  minBookingDurationMinutes: Int
  maxBookingDurationMinutes: Int
  openTime: String
  closeTime: String
}

input FacilityRelateToManyForCreateInput {
  create: [FacilityCreateInput!]
  connect: [FacilityWhereUniqueInput!]
}

type Program {
  id: ID!
  name: String
  description: String
  type: String
  startDate: DateTime
  endDate: DateTime
  capacity: Int
  price: Float
  memberPrice: Float
  isActive: Boolean
  isVisible: Boolean
  customSessions: Boolean
  repeats: Boolean
  frequency: String
  recurrenceEnds: String
  recurrenceEndDate: CalendarDay
  recurrenceCount: Int
  facility: Facility
  schedule: JSON
  startTime: DateTime
  endTime: DateTime
  daysOfWeek: [String!]
  enrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  minAge: Int
  maxAge: Int
  createdAt: DateTime
  updatedAt: DateTime
  status: String
  computedStatus: String
  enrollmentCount: Int
  enrollmentStartDate: DateTime
  enrollmentEndDate: DateTime
  registrationOpen: Boolean
  instructors(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  instructorsCount(where: UserWhereInput! = {}): Int
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  sessionsCount(where: SessionWhereInput! = {}): Int
  requireEmergencyContactInfo: Boolean
  requireTShirtSize: Boolean
  allowDropIn: Boolean
  dropInPrice: Float
}

input ProgramWhereUniqueInput {
  id: ID
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  type: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  capacity: IntFilter
  price: FloatFilter
  memberPrice: FloatNullableFilter
  isActive: BooleanFilter
  isVisible: BooleanFilter
  customSessions: BooleanFilter
  repeats: BooleanFilter
  frequency: StringNullableFilter
  recurrenceEnds: StringNullableFilter
  recurrenceEndDate: CalendarDayNullableFilter
  recurrenceCount: IntNullableFilter
  facility: FacilityWhereInput
  startTime: DateTimeFilter
  endTime: DateTimeFilter
  enrollments: EnrollmentManyRelationFilter
  minAge: IntNullableFilter
  maxAge: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  status: StringFilter
  enrollmentStartDate: DateTimeNullableFilter
  enrollmentEndDate: DateTimeNullableFilter
  instructors: UserManyRelationFilter
  sessions: SessionManyRelationFilter
  requireEmergencyContactInfo: BooleanFilter
  requireTShirtSize: BooleanFilter
  allowDropIn: BooleanFilter
  dropInPrice: FloatNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input SessionManyRelationFilter {
  every: SessionWhereInput
  some: SessionWhereInput
  none: SessionWhereInput
}

input ProgramOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  type: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  capacity: OrderDirection
  price: OrderDirection
  memberPrice: OrderDirection
  isActive: OrderDirection
  isVisible: OrderDirection
  customSessions: OrderDirection
  repeats: OrderDirection
  frequency: OrderDirection
  recurrenceEnds: OrderDirection
  recurrenceEndDate: OrderDirection
  recurrenceCount: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  minAge: OrderDirection
  maxAge: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  status: OrderDirection
  enrollmentStartDate: OrderDirection
  enrollmentEndDate: OrderDirection
  requireEmergencyContactInfo: OrderDirection
  requireTShirtSize: OrderDirection
  allowDropIn: OrderDirection
  dropInPrice: OrderDirection
}

input ProgramUpdateInput {
  name: String
  description: String
  type: String
  startDate: DateTime
  endDate: DateTime
  capacity: Int
  price: Float
  memberPrice: Float
  isActive: Boolean
  isVisible: Boolean
  customSessions: Boolean
  repeats: Boolean
  frequency: String
  recurrenceEnds: String
  recurrenceEndDate: CalendarDay
  recurrenceCount: Int
  facility: FacilityRelateToOneForUpdateInput
  schedule: JSON
  startTime: DateTime
  endTime: DateTime
  daysOfWeek: [String!]
  enrollments: EnrollmentRelateToManyForUpdateInput
  minAge: Int
  maxAge: Int
  createdAt: DateTime
  updatedAt: DateTime
  status: String
  enrollmentStartDate: DateTime
  enrollmentEndDate: DateTime
  instructors: UserRelateToManyForUpdateInput
  sessions: SessionRelateToManyForUpdateInput
  requireEmergencyContactInfo: Boolean
  requireTShirtSize: Boolean
  allowDropIn: Boolean
  dropInPrice: Float
}

input FacilityRelateToOneForUpdateInput {
  create: FacilityCreateInput
  connect: FacilityWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input SessionRelateToManyForUpdateInput {
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  create: [SessionCreateInput!]
  connect: [SessionWhereUniqueInput!]
}

input ProgramUpdateArgs {
  where: ProgramWhereUniqueInput!
  data: ProgramUpdateInput!
}

input ProgramCreateInput {
  name: String
  description: String
  type: String
  startDate: DateTime
  endDate: DateTime
  capacity: Int
  price: Float
  memberPrice: Float
  isActive: Boolean
  isVisible: Boolean
  customSessions: Boolean
  repeats: Boolean
  frequency: String
  recurrenceEnds: String
  recurrenceEndDate: CalendarDay
  recurrenceCount: Int
  facility: FacilityRelateToOneForCreateInput
  schedule: JSON
  startTime: DateTime
  endTime: DateTime
  daysOfWeek: [String!]
  enrollments: EnrollmentRelateToManyForCreateInput
  minAge: Int
  maxAge: Int
  createdAt: DateTime
  updatedAt: DateTime
  status: String
  enrollmentStartDate: DateTime
  enrollmentEndDate: DateTime
  instructors: UserRelateToManyForCreateInput
  sessions: SessionRelateToManyForCreateInput
  requireEmergencyContactInfo: Boolean
  requireTShirtSize: Boolean
  allowDropIn: Boolean
  dropInPrice: Float
}

input FacilityRelateToOneForCreateInput {
  create: FacilityCreateInput
  connect: FacilityWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input SessionRelateToManyForCreateInput {
  create: [SessionCreateInput!]
  connect: [SessionWhereUniqueInput!]
}

type Enrollment {
  id: ID!
  program: Program
  session: Session
  customer: User
  participant: User
  dependent: Dependent
  status: String
  enrolledAt: DateTime
  updatedAt: DateTime
}

input EnrollmentWhereUniqueInput {
  id: ID
}

input EnrollmentWhereInput {
  AND: [EnrollmentWhereInput!]
  OR: [EnrollmentWhereInput!]
  NOT: [EnrollmentWhereInput!]
  id: IDFilter
  program: ProgramWhereInput
  session: SessionWhereInput
  customer: UserWhereInput
  participant: UserWhereInput
  dependent: DependentWhereInput
  status: StringFilter
  enrolledAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EnrollmentOrderByInput {
  id: OrderDirection
  status: OrderDirection
  enrolledAt: OrderDirection
  updatedAt: OrderDirection
}

input EnrollmentUpdateInput {
  program: ProgramRelateToOneForUpdateInput
  session: SessionRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  participant: UserRelateToOneForUpdateInput
  dependent: DependentRelateToOneForUpdateInput
  status: String
  enrolledAt: DateTime
  updatedAt: DateTime
}

input ProgramRelateToOneForUpdateInput {
  create: ProgramCreateInput
  connect: ProgramWhereUniqueInput
  disconnect: Boolean
}

input SessionRelateToOneForUpdateInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
  disconnect: Boolean
}

input DependentRelateToOneForUpdateInput {
  create: DependentCreateInput
  connect: DependentWhereUniqueInput
  disconnect: Boolean
}

input EnrollmentUpdateArgs {
  where: EnrollmentWhereUniqueInput!
  data: EnrollmentUpdateInput!
}

input EnrollmentCreateInput {
  program: ProgramRelateToOneForCreateInput
  session: SessionRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  participant: UserRelateToOneForCreateInput
  dependent: DependentRelateToOneForCreateInput
  status: String
  enrolledAt: DateTime
  updatedAt: DateTime
}

input ProgramRelateToOneForCreateInput {
  create: ProgramCreateInput
  connect: ProgramWhereUniqueInput
}

input SessionRelateToOneForCreateInput {
  create: SessionCreateInput
  connect: SessionWhereUniqueInput
}

input DependentRelateToOneForCreateInput {
  create: DependentCreateInput
  connect: DependentWhereUniqueInput
}

type Waiver {
  id: ID!
  title: String
  text: String
  version: String
  createdAt: DateTime
  acceptances(where: WaiverAcceptanceWhereInput! = {}, orderBy: [WaiverAcceptanceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WaiverAcceptanceWhereUniqueInput): [WaiverAcceptance!]
  acceptancesCount(where: WaiverAcceptanceWhereInput! = {}): Int
}

input WaiverWhereUniqueInput {
  id: ID
}

input WaiverWhereInput {
  AND: [WaiverWhereInput!]
  OR: [WaiverWhereInput!]
  NOT: [WaiverWhereInput!]
  id: IDFilter
  title: StringFilter
  text: StringFilter
  version: StringFilter
  createdAt: DateTimeNullableFilter
  acceptances: WaiverAcceptanceManyRelationFilter
}

input WaiverOrderByInput {
  id: OrderDirection
  title: OrderDirection
  text: OrderDirection
  version: OrderDirection
  createdAt: OrderDirection
}

input WaiverUpdateInput {
  title: String
  text: String
  version: String
  createdAt: DateTime
  acceptances: WaiverAcceptanceRelateToManyForUpdateInput
}

input WaiverUpdateArgs {
  where: WaiverWhereUniqueInput!
  data: WaiverUpdateInput!
}

input WaiverCreateInput {
  title: String
  text: String
  version: String
  createdAt: DateTime
  acceptances: WaiverAcceptanceRelateToManyForCreateInput
}

type WaiverAcceptance {
  id: ID!
  waiver: Waiver
  customer: User
  dependent: Dependent
  acceptedAt: DateTime
}

input WaiverAcceptanceWhereUniqueInput {
  id: ID
}

input WaiverAcceptanceWhereInput {
  AND: [WaiverAcceptanceWhereInput!]
  OR: [WaiverAcceptanceWhereInput!]
  NOT: [WaiverAcceptanceWhereInput!]
  id: IDFilter
  waiver: WaiverWhereInput
  customer: UserWhereInput
  dependent: DependentWhereInput
  acceptedAt: DateTimeNullableFilter
}

input WaiverAcceptanceOrderByInput {
  id: OrderDirection
  acceptedAt: OrderDirection
}

input WaiverAcceptanceUpdateInput {
  waiver: WaiverRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  dependent: DependentRelateToOneForUpdateInput
  acceptedAt: DateTime
}

input WaiverRelateToOneForUpdateInput {
  create: WaiverCreateInput
  connect: WaiverWhereUniqueInput
  disconnect: Boolean
}

input WaiverAcceptanceUpdateArgs {
  where: WaiverAcceptanceWhereUniqueInput!
  data: WaiverAcceptanceUpdateInput!
}

input WaiverAcceptanceCreateInput {
  waiver: WaiverRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  dependent: DependentRelateToOneForCreateInput
  acceptedAt: DateTime
}

input WaiverRelateToOneForCreateInput {
  create: WaiverCreateInput
  connect: WaiverWhereUniqueInput
}

type Session {
  id: ID!
  program: Program
  date: CalendarDay
  startTime: DateTime
  endTime: DateTime
  facility: Facility
  dropInPrice: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input SessionWhereUniqueInput {
  id: ID
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  id: IDFilter
  program: ProgramWhereInput
  date: CalendarDayFilter
  startTime: DateTimeFilter
  endTime: DateTimeFilter
  facility: FacilityWhereInput
  dropInPrice: FloatNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input SessionOrderByInput {
  id: OrderDirection
  date: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  dropInPrice: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SessionUpdateInput {
  program: ProgramRelateToOneForUpdateInput
  date: CalendarDay
  startTime: DateTime
  endTime: DateTime
  facility: FacilityRelateToOneForUpdateInput
  dropInPrice: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input SessionUpdateArgs {
  where: SessionWhereUniqueInput!
  data: SessionUpdateInput!
}

input SessionCreateInput {
  program: ProgramRelateToOneForCreateInput
  date: CalendarDay
  startTime: DateTime
  endTime: DateTime
  facility: FacilityRelateToOneForCreateInput
  dropInPrice: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type FacilityRental {
  id: ID!
  facility: Facility
  customer: User
  startTime: DateTime
  endTime: DateTime
  status: String
  holdExpiresAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input FacilityRentalWhereUniqueInput {
  id: ID
}

input FacilityRentalWhereInput {
  AND: [FacilityRentalWhereInput!]
  OR: [FacilityRentalWhereInput!]
  NOT: [FacilityRentalWhereInput!]
  id: IDFilter
  facility: FacilityWhereInput
  customer: UserWhereInput
  startTime: DateTimeFilter
  endTime: DateTimeFilter
  status: StringNullableFilter
  holdExpiresAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FacilityRentalOrderByInput {
  id: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  status: OrderDirection
  holdExpiresAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FacilityRentalUpdateInput {
  facility: FacilityRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  startTime: DateTime
  endTime: DateTime
  status: String
  holdExpiresAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input FacilityRentalUpdateArgs {
  where: FacilityRentalWhereUniqueInput!
  data: FacilityRentalUpdateInput!
}

input FacilityRentalCreateInput {
  facility: FacilityRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  startTime: DateTime
  endTime: DateTime
  status: String
  holdExpiresAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type Payment {
  id: ID!
  amount: Float
  status: String
  stripePaymentIntentId: String
  customer: User
  invoice: Invoice
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentWhereUniqueInput {
  id: ID
  invoice: InvoiceWhereUniqueInput
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  amount: FloatFilter
  status: StringFilter
  stripePaymentIntentId: StringFilter
  customer: UserWhereInput
  invoice: InvoiceWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  status: OrderDirection
  stripePaymentIntentId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PaymentUpdateInput {
  amount: Float
  status: String
  stripePaymentIntentId: String
  customer: UserRelateToOneForUpdateInput
  invoice: InvoiceRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input InvoiceRelateToOneForUpdateInput {
  create: InvoiceCreateInput
  connect: InvoiceWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  amount: Float
  status: String
  stripePaymentIntentId: String
  customer: UserRelateToOneForCreateInput
  invoice: InvoiceRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input InvoiceRelateToOneForCreateInput {
  create: InvoiceCreateInput
  connect: InvoiceWhereUniqueInput
}

type Invoice {
  id: ID!
  amount: Float
  status: String
  payment: Payment
  customer: User
  createdAt: DateTime
  updatedAt: DateTime
}

input InvoiceWhereUniqueInput {
  id: ID
  payment: PaymentWhereUniqueInput
}

input InvoiceWhereInput {
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  id: IDFilter
  amount: FloatFilter
  status: StringFilter
  payment: PaymentWhereInput
  customer: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input InvoiceOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InvoiceUpdateInput {
  amount: Float
  status: String
  payment: PaymentRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentRelateToOneForUpdateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
  disconnect: Boolean
}

input InvoiceUpdateArgs {
  where: InvoiceWhereUniqueInput!
  data: InvoiceUpdateInput!
}

input InvoiceCreateInput {
  amount: Float
  status: String
  payment: PaymentRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentRelateToOneForCreateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
}

type Refund {
  id: ID!
  amount: Float
  status: String
  stripeChargeId: String
  customer: User
  createdAt: DateTime
  updatedAt: DateTime
}

input RefundWhereUniqueInput {
  id: ID
}

input RefundWhereInput {
  AND: [RefundWhereInput!]
  OR: [RefundWhereInput!]
  NOT: [RefundWhereInput!]
  id: IDFilter
  amount: FloatFilter
  status: StringFilter
  stripeChargeId: StringFilter
  customer: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input RefundOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  status: OrderDirection
  stripeChargeId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RefundUpdateInput {
  amount: Float
  status: String
  stripeChargeId: String
  customer: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input RefundUpdateArgs {
  where: RefundWhereUniqueInput!
  data: RefundUpdateInput!
}

input RefundCreateInput {
  amount: Float
  status: String
  stripeChargeId: String
  customer: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type TrainingPackage {
  id: ID!
  name: String
  description: String
  sessionCount: Int
  price: Float
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  purchasedPackages(where: PurchasedPackageWhereInput! = {}, orderBy: [PurchasedPackageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PurchasedPackageWhereUniqueInput): [PurchasedPackage!]
  purchasedPackagesCount(where: PurchasedPackageWhereInput! = {}): Int
}

input TrainingPackageWhereUniqueInput {
  id: ID
}

input TrainingPackageWhereInput {
  AND: [TrainingPackageWhereInput!]
  OR: [TrainingPackageWhereInput!]
  NOT: [TrainingPackageWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  sessionCount: IntFilter
  price: FloatFilter
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  purchasedPackages: PurchasedPackageManyRelationFilter
}

input PurchasedPackageManyRelationFilter {
  every: PurchasedPackageWhereInput
  some: PurchasedPackageWhereInput
  none: PurchasedPackageWhereInput
}

input TrainingPackageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  sessionCount: OrderDirection
  price: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TrainingPackageUpdateInput {
  name: String
  description: String
  sessionCount: Int
  price: Float
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  purchasedPackages: PurchasedPackageRelateToManyForUpdateInput
}

input PurchasedPackageRelateToManyForUpdateInput {
  disconnect: [PurchasedPackageWhereUniqueInput!]
  set: [PurchasedPackageWhereUniqueInput!]
  create: [PurchasedPackageCreateInput!]
  connect: [PurchasedPackageWhereUniqueInput!]
}

input TrainingPackageUpdateArgs {
  where: TrainingPackageWhereUniqueInput!
  data: TrainingPackageUpdateInput!
}

input TrainingPackageCreateInput {
  name: String
  description: String
  sessionCount: Int
  price: Float
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  purchasedPackages: PurchasedPackageRelateToManyForCreateInput
}

input PurchasedPackageRelateToManyForCreateInput {
  create: [PurchasedPackageCreateInput!]
  connect: [PurchasedPackageWhereUniqueInput!]
}

type PurchasedPackage {
  id: ID!
  package: TrainingPackage
  customer: User
  dependent: Dependent
  sessionsRemaining: Int
  sessionsUsed: Int
  purchasedAt: DateTime
  trainingSessions(where: TrainingSessionWhereInput! = {}, orderBy: [TrainingSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrainingSessionWhereUniqueInput): [TrainingSession!]
  trainingSessionsCount(where: TrainingSessionWhereInput! = {}): Int
  payment: Payment
  invoice: Invoice
}

input PurchasedPackageWhereUniqueInput {
  id: ID
}

input PurchasedPackageWhereInput {
  AND: [PurchasedPackageWhereInput!]
  OR: [PurchasedPackageWhereInput!]
  NOT: [PurchasedPackageWhereInput!]
  id: IDFilter
  package: TrainingPackageWhereInput
  customer: UserWhereInput
  dependent: DependentWhereInput
  sessionsRemaining: IntFilter
  sessionsUsed: IntNullableFilter
  purchasedAt: DateTimeNullableFilter
  trainingSessions: TrainingSessionManyRelationFilter
  payment: PaymentWhereInput
  invoice: InvoiceWhereInput
}

input TrainingSessionManyRelationFilter {
  every: TrainingSessionWhereInput
  some: TrainingSessionWhereInput
  none: TrainingSessionWhereInput
}

input PurchasedPackageOrderByInput {
  id: OrderDirection
  sessionsRemaining: OrderDirection
  sessionsUsed: OrderDirection
  purchasedAt: OrderDirection
}

input PurchasedPackageUpdateInput {
  package: TrainingPackageRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  dependent: DependentRelateToOneForUpdateInput
  sessionsRemaining: Int
  sessionsUsed: Int
  purchasedAt: DateTime
  trainingSessions: TrainingSessionRelateToManyForUpdateInput
  payment: PaymentRelateToOneForUpdateInput
  invoice: InvoiceRelateToOneForUpdateInput
}

input TrainingPackageRelateToOneForUpdateInput {
  create: TrainingPackageCreateInput
  connect: TrainingPackageWhereUniqueInput
  disconnect: Boolean
}

input TrainingSessionRelateToManyForUpdateInput {
  disconnect: [TrainingSessionWhereUniqueInput!]
  set: [TrainingSessionWhereUniqueInput!]
  create: [TrainingSessionCreateInput!]
  connect: [TrainingSessionWhereUniqueInput!]
}

input PurchasedPackageUpdateArgs {
  where: PurchasedPackageWhereUniqueInput!
  data: PurchasedPackageUpdateInput!
}

input PurchasedPackageCreateInput {
  package: TrainingPackageRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  dependent: DependentRelateToOneForCreateInput
  sessionsRemaining: Int
  sessionsUsed: Int
  purchasedAt: DateTime
  trainingSessions: TrainingSessionRelateToManyForCreateInput
  payment: PaymentRelateToOneForCreateInput
  invoice: InvoiceRelateToOneForCreateInput
}

input TrainingPackageRelateToOneForCreateInput {
  create: TrainingPackageCreateInput
  connect: TrainingPackageWhereUniqueInput
}

input TrainingSessionRelateToManyForCreateInput {
  create: [TrainingSessionCreateInput!]
  connect: [TrainingSessionWhereUniqueInput!]
}

type TrainingSession {
  id: ID!
  purchasedPackage: PurchasedPackage
  coach: User
  customer: User
  dependent: Dependent
  facility: Facility
  scheduledAt: DateTime
  startTime: DateTime
  endTime: DateTime
  status: String
  notes: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TrainingSessionWhereUniqueInput {
  id: ID
}

input TrainingSessionWhereInput {
  AND: [TrainingSessionWhereInput!]
  OR: [TrainingSessionWhereInput!]
  NOT: [TrainingSessionWhereInput!]
  id: IDFilter
  purchasedPackage: PurchasedPackageWhereInput
  coach: UserWhereInput
  customer: UserWhereInput
  dependent: DependentWhereInput
  facility: FacilityWhereInput
  scheduledAt: DateTimeFilter
  startTime: DateTimeFilter
  endTime: DateTimeFilter
  status: StringNullableFilter
  notes: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TrainingSessionOrderByInput {
  id: OrderDirection
  scheduledAt: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  status: OrderDirection
  notes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TrainingSessionUpdateInput {
  purchasedPackage: PurchasedPackageRelateToOneForUpdateInput
  coach: UserRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  dependent: DependentRelateToOneForUpdateInput
  facility: FacilityRelateToOneForUpdateInput
  scheduledAt: DateTime
  startTime: DateTime
  endTime: DateTime
  status: String
  notes: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PurchasedPackageRelateToOneForUpdateInput {
  create: PurchasedPackageCreateInput
  connect: PurchasedPackageWhereUniqueInput
  disconnect: Boolean
}

input TrainingSessionUpdateArgs {
  where: TrainingSessionWhereUniqueInput!
  data: TrainingSessionUpdateInput!
}

input TrainingSessionCreateInput {
  purchasedPackage: PurchasedPackageRelateToOneForCreateInput
  coach: UserRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  dependent: DependentRelateToOneForCreateInput
  facility: FacilityRelateToOneForCreateInput
  scheduledAt: DateTime
  startTime: DateTime
  endTime: DateTime
  status: String
  notes: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PurchasedPackageRelateToOneForCreateInput {
  create: PurchasedPackageCreateInput
  connect: PurchasedPackageWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createDependent(data: DependentCreateInput!): Dependent
  createDependents(data: [DependentCreateInput!]!): [Dependent]
  updateDependent(where: DependentWhereUniqueInput!, data: DependentUpdateInput!): Dependent
  updateDependents(data: [DependentUpdateArgs!]!): [Dependent]
  deleteDependent(where: DependentWhereUniqueInput!): Dependent
  deleteDependents(where: [DependentWhereUniqueInput!]!): [Dependent]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createFacility(data: FacilityCreateInput!): Facility
  createFacilities(data: [FacilityCreateInput!]!): [Facility]
  updateFacility(where: FacilityWhereUniqueInput!, data: FacilityUpdateInput!): Facility
  updateFacilities(data: [FacilityUpdateArgs!]!): [Facility]
  deleteFacility(where: FacilityWhereUniqueInput!): Facility
  deleteFacilities(where: [FacilityWhereUniqueInput!]!): [Facility]
  createProgram(data: ProgramCreateInput!): Program
  createPrograms(data: [ProgramCreateInput!]!): [Program]
  updateProgram(where: ProgramWhereUniqueInput!, data: ProgramUpdateInput!): Program
  updatePrograms(data: [ProgramUpdateArgs!]!): [Program]
  deleteProgram(where: ProgramWhereUniqueInput!): Program
  deletePrograms(where: [ProgramWhereUniqueInput!]!): [Program]
  createEnrollment(data: EnrollmentCreateInput!): Enrollment
  createEnrollments(data: [EnrollmentCreateInput!]!): [Enrollment]
  updateEnrollment(where: EnrollmentWhereUniqueInput!, data: EnrollmentUpdateInput!): Enrollment
  updateEnrollments(data: [EnrollmentUpdateArgs!]!): [Enrollment]
  deleteEnrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  deleteEnrollments(where: [EnrollmentWhereUniqueInput!]!): [Enrollment]
  createWaiver(data: WaiverCreateInput!): Waiver
  createWaivers(data: [WaiverCreateInput!]!): [Waiver]
  updateWaiver(where: WaiverWhereUniqueInput!, data: WaiverUpdateInput!): Waiver
  updateWaivers(data: [WaiverUpdateArgs!]!): [Waiver]
  deleteWaiver(where: WaiverWhereUniqueInput!): Waiver
  deleteWaivers(where: [WaiverWhereUniqueInput!]!): [Waiver]
  createWaiverAcceptance(data: WaiverAcceptanceCreateInput!): WaiverAcceptance
  createWaiverAcceptances(data: [WaiverAcceptanceCreateInput!]!): [WaiverAcceptance]
  updateWaiverAcceptance(where: WaiverAcceptanceWhereUniqueInput!, data: WaiverAcceptanceUpdateInput!): WaiverAcceptance
  updateWaiverAcceptances(data: [WaiverAcceptanceUpdateArgs!]!): [WaiverAcceptance]
  deleteWaiverAcceptance(where: WaiverAcceptanceWhereUniqueInput!): WaiverAcceptance
  deleteWaiverAcceptances(where: [WaiverAcceptanceWhereUniqueInput!]!): [WaiverAcceptance]
  createSession(data: SessionCreateInput!): Session
  createSessions(data: [SessionCreateInput!]!): [Session]
  updateSession(where: SessionWhereUniqueInput!, data: SessionUpdateInput!): Session
  updateSessions(data: [SessionUpdateArgs!]!): [Session]
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteSessions(where: [SessionWhereUniqueInput!]!): [Session]
  createFacilityRental(data: FacilityRentalCreateInput!): FacilityRental
  createFacilityRentals(data: [FacilityRentalCreateInput!]!): [FacilityRental]
  updateFacilityRental(where: FacilityRentalWhereUniqueInput!, data: FacilityRentalUpdateInput!): FacilityRental
  updateFacilityRentals(data: [FacilityRentalUpdateArgs!]!): [FacilityRental]
  deleteFacilityRental(where: FacilityRentalWhereUniqueInput!): FacilityRental
  deleteFacilityRentals(where: [FacilityRentalWhereUniqueInput!]!): [FacilityRental]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createInvoice(data: InvoiceCreateInput!): Invoice
  createInvoices(data: [InvoiceCreateInput!]!): [Invoice]
  updateInvoice(where: InvoiceWhereUniqueInput!, data: InvoiceUpdateInput!): Invoice
  updateInvoices(data: [InvoiceUpdateArgs!]!): [Invoice]
  deleteInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteInvoices(where: [InvoiceWhereUniqueInput!]!): [Invoice]
  createRefund(data: RefundCreateInput!): Refund
  createRefunds(data: [RefundCreateInput!]!): [Refund]
  updateRefund(where: RefundWhereUniqueInput!, data: RefundUpdateInput!): Refund
  updateRefunds(data: [RefundUpdateArgs!]!): [Refund]
  deleteRefund(where: RefundWhereUniqueInput!): Refund
  deleteRefunds(where: [RefundWhereUniqueInput!]!): [Refund]
  createTrainingPackage(data: TrainingPackageCreateInput!): TrainingPackage
  createTrainingPackages(data: [TrainingPackageCreateInput!]!): [TrainingPackage]
  updateTrainingPackage(where: TrainingPackageWhereUniqueInput!, data: TrainingPackageUpdateInput!): TrainingPackage
  updateTrainingPackages(data: [TrainingPackageUpdateArgs!]!): [TrainingPackage]
  deleteTrainingPackage(where: TrainingPackageWhereUniqueInput!): TrainingPackage
  deleteTrainingPackages(where: [TrainingPackageWhereUniqueInput!]!): [TrainingPackage]
  createPurchasedPackage(data: PurchasedPackageCreateInput!): PurchasedPackage
  createPurchasedPackages(data: [PurchasedPackageCreateInput!]!): [PurchasedPackage]
  updatePurchasedPackage(where: PurchasedPackageWhereUniqueInput!, data: PurchasedPackageUpdateInput!): PurchasedPackage
  updatePurchasedPackages(data: [PurchasedPackageUpdateArgs!]!): [PurchasedPackage]
  deletePurchasedPackage(where: PurchasedPackageWhereUniqueInput!): PurchasedPackage
  deletePurchasedPackages(where: [PurchasedPackageWhereUniqueInput!]!): [PurchasedPackage]
  createTrainingSession(data: TrainingSessionCreateInput!): TrainingSession
  createTrainingSessions(data: [TrainingSessionCreateInput!]!): [TrainingSession]
  updateTrainingSession(where: TrainingSessionWhereUniqueInput!, data: TrainingSessionUpdateInput!): TrainingSession
  updateTrainingSessions(data: [TrainingSessionUpdateArgs!]!): [TrainingSession]
  deleteTrainingSession(where: TrainingSessionWhereUniqueInput!): TrainingSession
  deleteTrainingSessions(where: [TrainingSessionWhereUniqueInput!]!): [TrainingSession]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  dependent(where: DependentWhereUniqueInput!): Dependent
  dependents(where: DependentWhereInput! = {}, orderBy: [DependentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DependentWhereUniqueInput): [Dependent!]
  dependentsCount(where: DependentWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  facility(where: FacilityWhereUniqueInput!): Facility
  facilities(where: FacilityWhereInput! = {}, orderBy: [FacilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityWhereUniqueInput): [Facility!]
  facilitiesCount(where: FacilityWhereInput! = {}): Int
  program(where: ProgramWhereUniqueInput!): Program
  programs(where: ProgramWhereInput! = {}, orderBy: [ProgramOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProgramWhereUniqueInput): [Program!]
  programsCount(where: ProgramWhereInput! = {}): Int
  enrollment(where: EnrollmentWhereUniqueInput!): Enrollment
  enrollments(where: EnrollmentWhereInput! = {}, orderBy: [EnrollmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnrollmentWhereUniqueInput): [Enrollment!]
  enrollmentsCount(where: EnrollmentWhereInput! = {}): Int
  waiver(where: WaiverWhereUniqueInput!): Waiver
  waivers(where: WaiverWhereInput! = {}, orderBy: [WaiverOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WaiverWhereUniqueInput): [Waiver!]
  waiversCount(where: WaiverWhereInput! = {}): Int
  waiverAcceptance(where: WaiverAcceptanceWhereUniqueInput!): WaiverAcceptance
  waiverAcceptances(where: WaiverAcceptanceWhereInput! = {}, orderBy: [WaiverAcceptanceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WaiverAcceptanceWhereUniqueInput): [WaiverAcceptance!]
  waiverAcceptancesCount(where: WaiverAcceptanceWhereInput! = {}): Int
  session(where: SessionWhereUniqueInput!): Session
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  sessionsCount(where: SessionWhereInput! = {}): Int
  facilityRental(where: FacilityRentalWhereUniqueInput!): FacilityRental
  facilityRentals(where: FacilityRentalWhereInput! = {}, orderBy: [FacilityRentalOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FacilityRentalWhereUniqueInput): [FacilityRental!]
  facilityRentalsCount(where: FacilityRentalWhereInput! = {}): Int
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  invoices(where: InvoiceWhereInput! = {}, orderBy: [InvoiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InvoiceWhereUniqueInput): [Invoice!]
  invoicesCount(where: InvoiceWhereInput! = {}): Int
  refund(where: RefundWhereUniqueInput!): Refund
  refunds(where: RefundWhereInput! = {}, orderBy: [RefundOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RefundWhereUniqueInput): [Refund!]
  refundsCount(where: RefundWhereInput! = {}): Int
  trainingPackage(where: TrainingPackageWhereUniqueInput!): TrainingPackage
  trainingPackages(where: TrainingPackageWhereInput! = {}, orderBy: [TrainingPackageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrainingPackageWhereUniqueInput): [TrainingPackage!]
  trainingPackagesCount(where: TrainingPackageWhereInput! = {}): Int
  purchasedPackage(where: PurchasedPackageWhereUniqueInput!): PurchasedPackage
  purchasedPackages(where: PurchasedPackageWhereInput! = {}, orderBy: [PurchasedPackageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PurchasedPackageWhereUniqueInput): [PurchasedPackage!]
  purchasedPackagesCount(where: PurchasedPackageWhereInput! = {}): Int
  trainingSession(where: TrainingSessionWhereUniqueInput!): TrainingSession
  trainingSessions(where: TrainingSessionWhereInput! = {}, orderBy: [TrainingSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TrainingSessionWhereUniqueInput): [TrainingSession!]
  trainingSessionsCount(where: TrainingSessionWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
